{"version":3,"sources":["components/Todo.js","components/Todolist.js","components/Form.js","App.js","reportWebVitals.js","index.js"],"names":["Todo","text","todo","todos","setTodos","className","completed","onClick","map","item","id","filter","el","Todolist","filteredTodos","Form","setInputText","inputText","setStatus","placeholder","value","onChange","e","console","log","target","type","preventDefault","Math","random","name","App","useState","status","setFilterTodos","useEffect","getLocalTodos","filterHandler","saveLocalTodos","localStorage","setItem","JSON","stringify","getItem","todoLocal","parse","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.cfdd8c68.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Todo = ({ text,  todo, todos, setTodos }) => {\r\n    const deleteHandler = () => {\r\n        setTodos(todos.filter((el) => el.id !== todo.id));\r\n    };\r\n    const completeHandler = () => {\r\n        setTodos(todos.map(item => {\r\n            if(item.id === todo.id) {\r\n                return{\r\n                    ...item, completed: !item.completed\r\n                }\r\n            }\r\n            return item;\r\n        }))\r\n    }\r\n    return (\r\n        <div className=\"todo\">\r\n            <li className={`todo-item ${todo.completed ? \"completed\" : ''}`}>{text}</li>   \r\n            <button onClick={completeHandler} className=\"complete-btn\"><i className=\"fas fa-check\"></i></button>         \r\n            <button onClick={deleteHandler} className=\"trash-btn\"><i className=\"fas fa-trash\"></i></button>         \r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Todo;","import React from 'react';\r\nimport Todo from './Todo';\r\n\r\nconst Todolist = ({ todos, setTodos, filteredTodos }) => {\r\n    return (\r\n        <div className=\"todo-container\">\r\n            <ul className=\"todo-list\">\r\n                {filteredTodos.map((todo) => (\r\n                    <Todo \r\n                    setTodos={setTodos} \r\n                    todos={todos} \r\n                    key={todo.id} \r\n                    todo={todo} \r\n                    text={todo.text} \r\n                />\r\n                ))}\r\n            </ul>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Todolist;","import React from 'react';\r\n\r\nconst Form = ({ setInputText,todos,setTodos, inputText, setStatus }) => {\r\n    const inputTextHandler = (e) => {\r\n        console.log(e.target.value);\r\n        setInputText(e.target.value);\r\n    };\r\n    const submitTodoHandler = (e) => {\r\n        e.preventDefault(); //to prevent refresh when clicking enter key or submit button\r\n        setTodos([\r\n            ...todos, {text: inputText, completed: false, id: Math.random()* 1000 }\r\n        ])\r\n        setInputText(\"\");\r\n    };\r\n\r\n    \r\n    const statusHandler = (e) => {\r\n        setStatus(e.target.value); \r\n    }\r\n    return (\r\n        <div>\r\n            <form>\r\n                <input placeholder=\"Get started\" value={inputText} onChange={inputTextHandler} type=\"text\" className=\"todo-input\" />\r\n                <button onClick={submitTodoHandler} className=\"todo-button\" type=\"submit\">\r\n                    <i className=\"fas fa-plus-square\"></i>\r\n                </button>\r\n                <div className=\"select\">\r\n                    <select onChange={statusHandler} name=\"todos\" className=\"filter-todo\">\r\n                    <option value=\"all\">All</option>\r\n                    <option value=\"completed\">Completed</option>\r\n                    <option value=\"uncompleted\">Uncompleted</option>\r\n                    </select>\r\n                  </div>\r\n             </form>\r\n    </div>\r\n    );\r\n};\r\n\r\nexport default Form;","import React, { useState, useEffect } from 'react';\nimport './App.css';\nimport Todolist from './components/Todolist';\nimport Form from './components/Form';\n\nfunction App() {\n  const [inputText, setInputText] = useState(\"\");\n  const [todos, setTodos] = useState([]);\n  const [status,setStatus] = useState('all');\n  const [filteredTodos, setFilterTodos] = useState([]);\n\n  useEffect(() => {\n    getLocalTodos(); //retrieve saved todo list from localStorage\n  }, []);\n  \n  useEffect(() => {\n    filterHandler(); //filters task which is completed or uncompleted\n    saveLocalTodos(); //saving todo in localStorage\n  }, [todos, status]);\n\n\n\n\n  //to check what is completed or not completed in in single view insted of reading all together\n  const filterHandler = () => {\n    switch (status) {\n      case 'completed':\n        setFilterTodos(todos.filter(todo => todo.completed === true));       \n        break;\n      case 'uncompleted':\n        setFilterTodos(todos.filter(todo => todo.completed === false));       \n        break;\n      default:\n        setFilterTodos(todos);\n        break;\n    }\n  };\n// saving todo in localStorage\n    const saveLocalTodos = () => {\n        localStorage.setItem('todos', JSON.stringify(todos))\n    };\n//retrieve saved todo list from localStorage\n    const getLocalTodos = () => {\n        if(localStorage.getItem('todos') === null){\n            localStorage.setItem('todos', JSON.stringify([]));\n        } else {\n            let todoLocal = JSON.parse(localStorage.getItem('todos'));\n            setTodos(todoLocal)\n        }\n    }\n\n\n  return (\n    <div className=\"App\">\n      <header>\n        <h1>To-Do</h1>\n      </header>\n      <Form //input field for todo and filter to check task completed or uncompleted.\n      inputText={inputText} \n      todos={todos} \n      setTodos={setTodos} \n      setInputText={setInputText}\n      setStatus={setStatus} \n      />\n      <Todolist //list of todos, \n      filteredTodos={filteredTodos}\n      setTodos={setTodos} \n      todos={todos} />\n    </div>\n  );\n}\n\nexport default App;\n ","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}